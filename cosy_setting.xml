<application>
  <component name="CosySettings">
    <option name="dedicatedDomainUrl" value="" />
    <option name="localStoragePath" value="C:\Users\laohuashi\.lingma" />
    <option name="manualOpenLocalModel" value="true" />
    <option name="parameter">
      <ChangeUserSettingParams>
        <option name="allowReportUsage" value="true" />
        <option name="cloud">
          <CloudModelParam>
            <option name="autoTrigger">
              <CloudModelAutoTrigger>
                <option name="enable" value="true" />
                <option name="generateLength" value="level_1" />
                <option name="modelLevel" value="large" />
              </CloudModelAutoTrigger>
            </option>
            <option name="enable" value="true" />
            <option name="manualTrigger">
              <CloudModelManualTrigger>
                <option name="generateLength" value="level_2" />
                <option name="modelLevel" value="large" />
              </CloudModelManualTrigger>
            </option>
          </CloudModelParam>
        </option>
        <option name="local">
          <LocalModelParam>
            <option name="enable" value="true" />
            <option name="inferenceMode" value="auto" />
            <option name="maxCandidateNum" value="3" />
          </LocalModelParam>
        </option>
      </ChangeUserSettingParams>
    </option>
    <option name="recentQueries">
      <map>
        <entry key="Daily Notes|1738711289590196">
          <value>
            <list>
              <option value="9-70:20 Error:&#10;&#9;android:exported needs to be explicitly specified for element &lt;activity#tk.louisstudio.daily_notes.MainActivity&gt;. Apps targeting Android 12 and higher are required to specify an explicit value for `android:exported` when the corresponding component has an intent filter defined. See https://developer.android.com/guide/topics/manifest/activity-element#exported for details." />
              <option value="D:\Android\AndroidProject\DailyNotes\app\build\intermediates\tmp\manifest\androidTest\debug\tempFile1ProcessTestManifest6652071601775202671.xml:27:9-33:20 Error:&#10;&#9;android:exported needs to be explicitly specified for element &lt;activity#androidx.test.core.app.InstrumentationActivityInvoker$BootstrapActivity&gt;. Apps targeting Android 12 and higher are required to specify an explicit value for `android:exported` when the corresponding component has an intent filter defined. See https://developer.android.com/guide/topics/manifest/activity-element#exported for details.&#10;D:\Android\AndroidProject\DailyNotes\app\build\intermediates\tmp\manifest\androidTest\debug\tempFile1ProcessTestManifest6652071601775202671.xml:34:9-40:20 Error:&#10;&#9;android:exported needs to be explicitly specified for element &lt;activity#androidx.test.core.app.InstrumentationActivityInvoker$EmptyActivity&gt;. Apps targeting Android 12 and higher are required to specify an explicit value for `android:exported` when the corresponding component has an intent filter defined. See https://developer.android.com/guide/topics/manifest/activity-element#exported for details.&#10;D:\Android\AndroidProject\DailyNotes\app\build\intermediates\tmp\manifest\androidTest\debug\tempFile1ProcessTestManifest6652071601775202671.xml:41:9-47:20 Error:&#10;&#9;android:exported needs to be explicitly specified for element &lt;activity#androidx.test.core.app.InstrumentationActivityInvoker$EmptyFloatingActivity&gt;. Apps targeting Android 12 and higher are required to specify an explicit value for `android:exported` when the corresponding component has an intent filter defined. See https://developer.android.com/guide/topics/manifest/activity-element#exported for details." />
            </list>
          </value>
        </entry>
        <entry key="quillpad|">
          <value>
            <list>
              <option value="/explain code" />
            </list>
          </value>
        </entry>
        <entry key="quillpad|1032412478227560">
          <value>
            <list>
              <option value="/explain code" />
              <option value="/explain code" />
              <option value="enum class CloudService(override val nameResource: Int) : HasNameResource, EnumPreference by key(&quot;cloud_service&quot;) {&#10;    DISABLED(R.string.preferences_cloud_service_disabled) { override val isDefault = true },&#10;    NEXTCLOUD(R.string.preferences_cloud_service_nextcloud),&#10;    WEBDAV(R.string.preferences_cloud_service_webdavcloud),&#10;}" />
              <option value="生成文档注释" />
              <option value="/explain code" />
              <option value="/explain code" />
              <option value="/generate comment" />
              <option value="/explain code" />
              <option value="/explain code" />
              <option value="Note.asNextcloudNote" />
              <option value="/explain code" />
              <option value="/explain code" />
              <option value="/explain code" />
              <option value="我使用 sardine-android 的依赖，想要达成上述代码的作用，用来访问WEBDAV，帮我生成例子" />
              <option value="我需要是和 nextcloud.kt 完全一致的写法" />
              <option value="我只需要接口，不要实现" />
              <option value="/generate comment" />
              <option value="/explain code" />
              <option value="/explain code" />
              <option value="/explain code" />
            </list>
          </value>
        </entry>
        <entry key="quillpad|1738711289590196">
          <value>
            <list>
              <option value="/explain code" />
              <option value="FATAL EXCEPTION: DefaultDispatcher-worker-3&#10;                                                       Process: io.github.quillpad, PID: 13367&#10;                                                       kotlin.NotImplementedError: An operation is not implemented: 提供返回值&#10;                                                       &#9;at org.qosp.notes.data.sync.webdav.WebdavAPIImpl.getNotesAPI(WebdavAPIImpl.kt:43)&#10;                                                       &#9;at org.qosp.notes.data.sync.webdav.WebdavAPIKt.testCredentials(WebdavAPI.kt:57)&#10;                                                       &#9;at org.qosp.notes.data.sync.webdav.WebdavManager.authenticate(WebdavManager.kt:53)&#10;                                                       &#9;at org.qosp.notes.data.sync.core.SyncManager$actor$1.invokeSuspend(SyncManager.kt:161)&#10;                                                       &#9;at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)&#10;                                                       &#9;at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)&#10;                                                       &#9;at kotlinx.coroutines.internal.LimitedDispatcher.run(LimitedDispatcher.kt:42)&#10;                                                       &#9;at kotlinx.coroutines.scheduling.TaskImpl.run(Tasks.kt:95)&#10;                                                       &#9;at kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely(CoroutineScheduler.kt:570)&#10;                                                       &#9;at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask(CoroutineScheduler.kt:750)&#10;                                                       &#9;at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker(CoroutineScheduler.kt:677)&#10;                                                       &#9;at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run(CoroutineScheduler.kt:664)&#10;                                                       &#9;Suppressed: kotlinx.coroutines.DiagnosticCoroutineContextException: [ActorCoroutine{Cancelling}@4c3acca, Dispatchers.IO]" />
              <option value="/explain code" />
              <option value="执行REPORT请求" />
              <option value="我是用 sradine-Android，从webdav上下载一个txt文件，应该怎么做" />
              <option value="sardine.setCredentials" />
              <option value="/explain code" />
              <option value="函数体在哪里" />
              <option value="/explain code" />
              <option value="我使用的 sardine -Android ，如何提供authenticationHeaders" />
              <option value="我不需要 basic auth" />
              <option value="Class 'WebdavAPIImpl' is not abstract and does not implement abstract member public abstract suspend fun createNoteAPI(note: WebdavNote, url: String, sardine: Sardine): WebdavNote defined in org.qosp.notes.data.sync.webdav.WebdavAPI" />
              <option value="/explain code" />
              <option value="帮我完成这个函数" />
              <option value="@Serializable&#10;data class WebdavNote(&#10;    val id: Long,&#10;    val etag: String? = null,&#10;    val content: String,&#10;    val title: String,&#10;    val category: String,&#10;    val favorite: Boolean,&#10;    val modified: Long,&#10;    val readOnly: Boolean? = null,&#10;)" />
              <option value="sardine.list(url)的返回值是 List&lt;DavResource&gt;" />
              <option value="//&#10;// Source code recreated from a .class file by IntelliJ IDEA&#10;// (powered by FernFlower decompiler)&#10;//&#10;&#10;package com.thegrizzlylabs.sardineandroid;&#10;&#10;import com.thegrizzlylabs.sardineandroid.model.Lockdiscovery;&#10;import com.thegrizzlylabs.sardineandroid.model.Propstat;&#10;import com.thegrizzlylabs.sardineandroid.model.Resourcetype;&#10;import com.thegrizzlylabs.sardineandroid.model.Response;&#10;import com.thegrizzlylabs.sardineandroid.model.Supportedlock;&#10;import com.thegrizzlylabs.sardineandroid.util.SardineUtil;&#10;import java.io.IOException;&#10;import java.net.URI;&#10;import java.net.URISyntaxException;&#10;import java.util.ArrayList;&#10;import java.util.Collections;&#10;import java.util.Date;&#10;import java.util.HashMap;&#10;import java.util.Iterator;&#10;import java.util.List;&#10;import java.util.Map;&#10;import java.util.logging.Logger;&#10;import javax.xml.namespace.QName;&#10;import okhttp3.internal.http.StatusLine;&#10;import org.w3c.dom.Element;&#10;&#10;public class DavResource {&#10;    private static final Logger log = Logger.getLogger(DavResource.class.getName());&#10;    public static final String DEFAULT_CONTENT_TYPE = &quot;application/octet-stream&quot;;&#10;    public static final long DEFAULT_CONTENT_LENGTH = -1L;&#10;    public static final String HTTPD_UNIX_DIRECTORY_CONTENT_TYPE = &quot;httpd/unix-directory&quot;;&#10;    public static final int DEFAULT_STATUS_CODE = 200;&#10;    private static final String SEPARATOR = &quot;/&quot;;&#10;    private final URI href;&#10;    private final int status;&#10;    private final DavProperties props;&#10;&#10;    protected DavResource(String href, Date creation, Date modified, String contentType, Long contentLength, String etag, String displayName, List&lt;QName&gt; resourceTypes, String contentLanguage, List&lt;QName&gt; supportedReports, Map&lt;QName, String&gt; customProps) throws URISyntaxException {&#10;        this.href = new URI(href);&#10;        this.status = 200;&#10;        this.props = new DavProperties(creation, modified, contentType, contentLength, etag, displayName, resourceTypes, contentLanguage, supportedReports, customProps);&#10;    }&#10;&#10;    public DavResource(Response response) throws URISyntaxException {&#10;        this.href = new URI(response.getHref());&#10;        this.status = this.getStatusCode(response);&#10;        this.props = new DavProperties(response);&#10;    }&#10;&#10;    private int getStatusCode(Response response) {&#10;        String status = response.getStatus();&#10;        if (status != null &amp;&amp; !status.isEmpty()) {&#10;            try {&#10;                return StatusLine.Companion.parse(response.getStatus()).code;&#10;            } catch (IOException var4) {&#10;                log.warning(String.format(&quot;Failed to parse status line: %s&quot;, status));&#10;                return -1;&#10;            }&#10;        } else {&#10;            return 200;&#10;        }&#10;    }&#10;&#10;    private String getModifiedDate(Response response) {&#10;        List&lt;Propstat&gt; list = response.getPropstat();&#10;        if (list.isEmpty()) {&#10;            return null;&#10;        } else {&#10;            Iterator var3 = list.iterator();&#10;&#10;            Propstat propstat;&#10;            do {&#10;                if (!var3.hasNext()) {&#10;                    return null;&#10;                }&#10;&#10;                propstat = (Propstat)var3.next();&#10;            } while(propstat.getProp() == null);&#10;&#10;            return propstat.getProp().getGetlastmodified();&#10;        }&#10;    }&#10;&#10;    private String getCreationDate(Response response) {&#10;        List&lt;Propstat&gt; list = response.getPropstat();&#10;        if (list.isEmpty()) {&#10;            return null;&#10;        } else {&#10;            Iterator var3 = list.iterator();&#10;&#10;            Propstat propstat;&#10;            do {&#10;                if (!var3.hasNext()) {&#10;                    return null;&#10;                }&#10;&#10;                propstat = (Propstat)var3.next();&#10;            } while(propstat.getProp() == null);&#10;&#10;            return propstat.getProp().getCreationdate();&#10;        }&#10;    }&#10;&#10;    private String getContentType(Response response) {&#10;        List&lt;Propstat&gt; list = response.getPropstat();&#10;        if (list.isEmpty()) {&#10;            return null;&#10;        } else {&#10;            Iterator var3 = list.iterator();&#10;&#10;            while(var3.hasNext()) {&#10;                Propstat propstat = (Propstat)var3.next();&#10;                if (propstat.getProp() != null) {&#10;                    Resourcetype resourcetype = propstat.getProp().getResourcetype();&#10;                    if (resourcetype != null &amp;&amp; resourcetype.getCollection() != null) {&#10;                        return &quot;httpd/unix-directory&quot;;&#10;                    }&#10;&#10;                    if (propstat.getProp().getGetcontenttype() != null) {&#10;                        return propstat.getProp().getGetcontenttype();&#10;                    }&#10;                }&#10;            }&#10;&#10;            return &quot;application/octet-stream&quot;;&#10;        }&#10;    }&#10;&#10;    private long getContentLength(Response response) {&#10;        List&lt;Propstat&gt; list = response.getPropstat();&#10;        if (list.isEmpty()) {&#10;            return -1L;&#10;        } else {&#10;            Iterator var3 = list.iterator();&#10;&#10;            while(true) {&#10;                String gcl;&#10;                do {&#10;                    Propstat propstat;&#10;                    do {&#10;                        if (!var3.hasNext()) {&#10;                            return -1L;&#10;                        }&#10;&#10;                        propstat = (Propstat)var3.next();&#10;                    } while(propstat.getProp() == null);&#10;&#10;                    gcl = propstat.getProp().getGetcontentlength();&#10;                } while(gcl == null);&#10;&#10;                try {&#10;                    return Long.parseLong(gcl);&#10;                } catch (NumberFormatException var7) {&#10;                    log.warning(String.format(&quot;Failed to parse content length %s&quot;, gcl));&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    private String getEtag(Response response) {&#10;        List&lt;Propstat&gt; list = response.getPropstat();&#10;        if (list.isEmpty()) {&#10;            return null;&#10;        } else {&#10;            Iterator var3 = list.iterator();&#10;&#10;            Propstat propstat;&#10;            do {&#10;                if (!var3.hasNext()) {&#10;                    return null;&#10;                }&#10;&#10;                propstat = (Propstat)var3.next();&#10;            } while(propstat.getProp() == null);&#10;&#10;            return propstat.getProp().getGetetag();&#10;        }&#10;    }&#10;&#10;    private String getContentLanguage(Response response) {&#10;        List&lt;Propstat&gt; list = response.getPropstat();&#10;        if (list.isEmpty()) {&#10;            return null;&#10;        } else {&#10;            Iterator var3 = list.iterator();&#10;&#10;            Propstat propstat;&#10;            do {&#10;                if (!var3.hasNext()) {&#10;                    return null;&#10;                }&#10;&#10;                propstat = (Propstat)var3.next();&#10;            } while(propstat.getProp() == null);&#10;&#10;            Resourcetype resourcetype = propstat.getProp().getResourcetype();&#10;            if (resourcetype != null &amp;&amp; resourcetype.getCollection() != null) {&#10;                return &quot;httpd/unix-directory&quot;;&#10;            } else {&#10;                return propstat.getProp().getGetcontentlanguage();&#10;            }&#10;        }&#10;    }&#10;&#10;    private String getDisplayName(Response response) {&#10;        List&lt;Propstat&gt; list = response.getPropstat();&#10;        if (list.isEmpty()) {&#10;            return null;&#10;        } else {&#10;            Iterator var3 = list.iterator();&#10;&#10;            Propstat propstat;&#10;            do {&#10;                if (!var3.hasNext()) {&#10;                    return null;&#10;                }&#10;&#10;                propstat = (Propstat)var3.next();&#10;            } while(propstat.getProp() == null);&#10;&#10;            return propstat.getProp().getDisplayname();&#10;        }&#10;    }&#10;&#10;    private List&lt;QName&gt; getResourceTypes(Response response) {&#10;        List&lt;Propstat&gt; list = response.getPropstat();&#10;        if (list.isEmpty()) {&#10;            return Collections.emptyList();&#10;        } else {&#10;            List&lt;QName&gt; resourceTypes = new ArrayList();&#10;            Iterator var4 = list.iterator();&#10;&#10;            while(true) {&#10;                Resourcetype rt;&#10;                do {&#10;                    Propstat propstat;&#10;                    do {&#10;                        if (!var4.hasNext()) {&#10;                            return resourceTypes;&#10;                        }&#10;&#10;                        propstat = (Propstat)var4.next();&#10;                    } while(propstat.getProp() == null);&#10;&#10;                    rt = propstat.getProp().getResourcetype();&#10;                } while(rt == null);&#10;&#10;                if (rt.getCollection() != null) {&#10;                    resourceTypes.add(SardineUtil.createQNameWithDefaultNamespace(&quot;collection&quot;));&#10;                }&#10;&#10;                if (rt.getPrincipal() != null) {&#10;                    resourceTypes.add(SardineUtil.createQNameWithDefaultNamespace(&quot;principal&quot;));&#10;                }&#10;&#10;                Iterator var7 = rt.getAny().iterator();&#10;&#10;                while(var7.hasNext()) {&#10;                    Element element = (Element)var7.next();&#10;                    resourceTypes.add(SardineUtil.toQName(element));&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    private Map&lt;QName, String&gt; getCustomProps(Response response) {&#10;        List&lt;Propstat&gt; list = response.getPropstat();&#10;        if (list.isEmpty()) {&#10;            return null;&#10;        } else {&#10;            Map&lt;QName, String&gt; customPropsMap = new HashMap();&#10;            Iterator var4 = list.iterator();&#10;&#10;            while(true) {&#10;                Propstat propstat;&#10;                do {&#10;                    if (!var4.hasNext()) {&#10;                        return customPropsMap;&#10;                    }&#10;&#10;                    propstat = (Propstat)var4.next();&#10;                } while(propstat.getProp() == null);&#10;&#10;                List&lt;Element&gt; props = propstat.getProp().getAny();&#10;                Iterator var7 = props.iterator();&#10;&#10;                while(var7.hasNext()) {&#10;                    Element element = (Element)var7.next();&#10;                    customPropsMap.put(SardineUtil.toQName(element), element.getTextContent());&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    private Lockdiscovery getLockDiscovery(Response response) {&#10;        List&lt;Propstat&gt; list = response.getPropstat();&#10;        if (list.isEmpty()) {&#10;            return null;&#10;        } else {&#10;            Iterator var3 = list.iterator();&#10;&#10;            Propstat propstat;&#10;            do {&#10;                if (!var3.hasNext()) {&#10;                    return null;&#10;                }&#10;&#10;                propstat = (Propstat)var3.next();&#10;            } while(propstat.getProp() == null);&#10;&#10;            return propstat.getProp().getLockdiscovery();&#10;        }&#10;    }&#10;&#10;    private Supportedlock getSupportedLock(Response response) {&#10;        List&lt;Propstat&gt; list = response.getPropstat();&#10;        if (list.isEmpty()) {&#10;            return null;&#10;        } else {&#10;            Iterator var3 = list.iterator();&#10;&#10;            Propstat propstat;&#10;            do {&#10;                if (!var3.hasNext()) {&#10;                    return null;&#10;                }&#10;&#10;                propstat = (Propstat)var3.next();&#10;            } while(propstat.getProp() == null);&#10;&#10;            return propstat.getProp().getSupportedlock();&#10;        }&#10;    }&#10;&#10;    public int getStatusCode() {&#10;        return this.status;&#10;    }&#10;&#10;    public Date getCreation() {&#10;        return this.props.creation;&#10;    }&#10;&#10;    public Date getModified() {&#10;        return this.props.modified;&#10;    }&#10;&#10;    public String getContentType() {&#10;        return this.props.contentType;&#10;    }&#10;&#10;    public Long getContentLength() {&#10;        return this.props.contentLength;&#10;    }&#10;&#10;    public String getEtag() {&#10;        return this.props.etag;&#10;    }&#10;&#10;    public String getContentLanguage() {&#10;        return this.props.contentLanguage;&#10;    }&#10;&#10;    public String getDisplayName() {&#10;        return this.props.displayName;&#10;    }&#10;&#10;    public List&lt;QName&gt; getResourceTypes() {&#10;        return this.props.resourceTypes;&#10;    }&#10;&#10;    public boolean isDirectory() {&#10;        return &quot;httpd/unix-directory&quot;.equals(this.props.contentType);&#10;    }&#10;&#10;    public Map&lt;String, String&gt; getCustomProps() {&#10;        Map&lt;String, String&gt; local = new HashMap();&#10;        Map&lt;QName, String&gt; properties = this.getCustomPropsNS();&#10;        Iterator var3 = properties.keySet().iterator();&#10;&#10;        while(var3.hasNext()) {&#10;            QName key = (QName)var3.next();&#10;            local.put(key.getLocalPart(), properties.get(key));&#10;        }&#10;&#10;        return local;&#10;    }&#10;&#10;    public Map&lt;QName, String&gt; getCustomPropsNS() {&#10;        return this.props.customProps;&#10;    }&#10;&#10;    public Lockdiscovery getLockDiscovery() {&#10;        return this.props.lockDiscovery;&#10;    }&#10;&#10;    public Supportedlock getSupportedlock() {&#10;        return this.props.supportedLock;&#10;    }&#10;&#10;    public URI getHref() {&#10;        return this.href;&#10;    }&#10;&#10;    public String getName() {&#10;        String path = this.href.getPath();&#10;&#10;        try {&#10;            if (path.endsWith(&quot;/&quot;)) {&#10;                path = path.substring(0, path.length() - 1);&#10;            }&#10;&#10;            return path.substring(path.lastIndexOf(47) + 1);&#10;        } catch (StringIndexOutOfBoundsException var3) {&#10;            log.warning(String.format(&quot;Failed to parse name from path %s&quot;, path));&#10;            return null;&#10;        }&#10;    }&#10;&#10;    public String getPath() {&#10;        return this.href.getPath();&#10;    }&#10;&#10;    public String toString() {&#10;        return this.getPath();&#10;    }&#10;&#10;    private class DavProperties {&#10;        final Date creation;&#10;        final Date modified;&#10;        final String contentType;&#10;        final String etag;&#10;        final String displayName;&#10;        final List&lt;QName&gt; resourceTypes;&#10;        final String contentLanguage;&#10;        final Long contentLength;&#10;        final Map&lt;QName, String&gt; customProps;&#10;        final Lockdiscovery lockDiscovery;&#10;        final Supportedlock supportedLock;&#10;&#10;        DavProperties(Date creation, Date modified, String contentType, Long contentLength, String etag, String displayName, List&lt;QName&gt; resourceTypes, String contentLanguage, List&lt;QName&gt; supportedReports, Map&lt;QName, String&gt; customProps) {&#10;            this.creation = creation;&#10;            this.modified = modified;&#10;            this.contentType = contentType;&#10;            this.contentLength = contentLength;&#10;            this.etag = etag;&#10;            this.displayName = displayName;&#10;            this.resourceTypes = resourceTypes;&#10;            this.contentLanguage = contentLanguage;&#10;            this.customProps = customProps;&#10;            this.lockDiscovery = null;&#10;            this.supportedLock = null;&#10;        }&#10;&#10;        DavProperties(Response response) {&#10;            this.creation = SardineUtil.parseDate(DavResource.this.getCreationDate(response));&#10;            this.modified = SardineUtil.parseDate(DavResource.this.getModifiedDate(response));&#10;            this.contentType = DavResource.this.getContentType(response);&#10;            this.contentLength = DavResource.this.getContentLength(response);&#10;            this.etag = DavResource.this.getEtag(response);&#10;            this.displayName = DavResource.this.getDisplayName(response);&#10;            this.resourceTypes = DavResource.this.getResourceTypes(response);&#10;            this.contentLanguage = DavResource.this.getContentLanguage(response);&#10;            this.customProps = DavResource.this.getCustomProps(response);&#10;            this.lockDiscovery = DavResource.this.getLockDiscovery(response);&#10;            this.supportedLock = DavResource.this.getSupportedLock(response);&#10;        }&#10;    }&#10;}" />
              <option value="//&#10;// Source code recreated from a .class file by IntelliJ IDEA&#10;// (powered by FernFlower decompiler)&#10;//&#10;&#10;package com.thegrizzlylabs.sardineandroid;&#10;&#10;import com.thegrizzlylabs.sardineandroid.model.Lockdiscovery;&#10;import com.thegrizzlylabs.sardineandroid.model.Propstat;&#10;import com.thegrizzlylabs.sardineandroid.model.Resourcetype;&#10;import com.thegrizzlylabs.sardineandroid.model.Response;&#10;import com.thegrizzlylabs.sardineandroid.model.Supportedlock;&#10;import com.thegrizzlylabs.sardineandroid.util.SardineUtil;&#10;import java.io.IOException;&#10;import java.net.URI;&#10;import java.net.URISyntaxException;&#10;import java.util.ArrayList;&#10;import java.util.Collections;&#10;import java.util.Date;&#10;import java.util.HashMap;&#10;import java.util.Iterator;&#10;import java.util.List;&#10;import java.util.Map;&#10;import java.util.logging.Logger;&#10;import javax.xml.namespace.QName;&#10;import okhttp3.internal.http.StatusLine;&#10;import org.w3c.dom.Element;&#10;&#10;public class DavResource {&#10;    private static final Logger log = Logger.getLogger(DavResource.class.getName());&#10;    public static final String DEFAULT_CONTENT_TYPE = &quot;application/octet-stream&quot;;&#10;    public static final long DEFAULT_CONTENT_LENGTH = -1L;&#10;    public static final String HTTPD_UNIX_DIRECTORY_CONTENT_TYPE = &quot;httpd/unix-directory&quot;;&#10;    public static final int DEFAULT_STATUS_CODE = 200;&#10;    private static final String SEPARATOR = &quot;/&quot;;&#10;    private final URI href;&#10;    private final int status;&#10;    private final DavProperties props;&#10;&#10;    protected DavResource(String href, Date creation, Date modified, String contentType, Long contentLength, String etag, String displayName, List&lt;QName&gt; resourceTypes, String contentLanguage, List&lt;QName&gt; supportedReports, Map&lt;QName, String&gt; customProps) throws URISyntaxException {&#10;        this.href = new URI(href);&#10;        this.status = 200;&#10;        this.props = new DavProperties(creation, modified, contentType, contentLength, etag, displayName, resourceTypes, contentLanguage, supportedReports, customProps);&#10;    }&#10;&#10;    public DavResource(Response response) throws URISyntaxException {&#10;        this.href = new URI(response.getHref());&#10;        this.status = this.getStatusCode(response);&#10;        this.props = new DavProperties(response);&#10;    }&#10;&#10;    private int getStatusCode(Response response) {&#10;        String status = response.getStatus();&#10;        if (status != null &amp;&amp; !status.isEmpty()) {&#10;            try {&#10;                return StatusLine.Companion.parse(response.getStatus()).code;&#10;            } catch (IOException var4) {&#10;                log.warning(String.format(&quot;Failed to parse status line: %s&quot;, status));&#10;                return -1;&#10;            }&#10;        } else {&#10;            return 200;&#10;        }&#10;    }&#10;&#10;    private String getModifiedDate(Response response) {&#10;        List&lt;Propstat&gt; list = response.getPropstat();&#10;        if (list.isEmpty()) {&#10;            return null;&#10;        } else {&#10;            Iterator var3 = list.iterator();&#10;&#10;            Propstat propstat;&#10;            do {&#10;                if (!var3.hasNext()) {&#10;                    return null;&#10;                }&#10;&#10;                propstat = (Propstat)var3.next();&#10;            } while(propstat.getProp() == null);&#10;&#10;            return propstat.getProp().getGetlastmodified();&#10;        }&#10;    }&#10;&#10;    private String getCreationDate(Response response) {&#10;        List&lt;Propstat&gt; list = response.getPropstat();&#10;        if (list.isEmpty()) {&#10;            return null;&#10;        } else {&#10;            Iterator var3 = list.iterator();&#10;&#10;            Propstat propstat;&#10;            do {&#10;                if (!var3.hasNext()) {&#10;                    return null;&#10;                }&#10;&#10;                propstat = (Propstat)var3.next();&#10;            } while(propstat.getProp() == null);&#10;&#10;            return propstat.getProp().getCreationdate();&#10;        }&#10;    }&#10;&#10;    private String getContentType(Response response) {&#10;        List&lt;Propstat&gt; list = response.getPropstat();&#10;        if (list.isEmpty()) {&#10;            return null;&#10;        } else {&#10;            Iterator var3 = list.iterator();&#10;&#10;            while(var3.hasNext()) {&#10;                Propstat propstat = (Propstat)var3.next();&#10;                if (propstat.getProp() != null) {&#10;                    Resourcetype resourcetype = propstat.getProp().getResourcetype();&#10;                    if (resourcetype != null &amp;&amp; resourcetype.getCollection() != null) {&#10;                        return &quot;httpd/unix-directory&quot;;&#10;                    }&#10;&#10;                    if (propstat.getProp().getGetcontenttype() != null) {&#10;                        return propstat.getProp().getGetcontenttype();&#10;                    }&#10;                }&#10;            }&#10;&#10;            return &quot;application/octet-stream&quot;;&#10;        }&#10;    }&#10;&#10;    private long getContentLength(Response response) {&#10;        List&lt;Propstat&gt; list = response.getPropstat();&#10;        if (list.isEmpty()) {&#10;            return -1L;&#10;        } else {&#10;            Iterator var3 = list.iterator();&#10;&#10;            while(true) {&#10;                String gcl;&#10;                do {&#10;                    Propstat propstat;&#10;                    do {&#10;                        if (!var3.hasNext()) {&#10;                            return -1L;&#10;                        }&#10;&#10;                        propstat = (Propstat)var3.next();&#10;                    } while(propstat.getProp() == null);&#10;&#10;                    gcl = propstat.getProp().getGetcontentlength();&#10;                } while(gcl == null);&#10;&#10;                try {&#10;                    return Long.parseLong(gcl);&#10;                } catch (NumberFormatException var7) {&#10;                    log.warning(String.format(&quot;Failed to parse content length %s&quot;, gcl));&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    private String getEtag(Response response) {&#10;        List&lt;Propstat&gt; list = response.getPropstat();&#10;        if (list.isEmpty()) {&#10;            return null;&#10;        } else {&#10;            Iterator var3 = list.iterator();&#10;&#10;            Propstat propstat;&#10;            do {&#10;                if (!var3.hasNext()) {&#10;                    return null;&#10;                }&#10;&#10;                propstat = (Propstat)var3.next();&#10;            } while(propstat.getProp() == null);&#10;&#10;            return propstat.getProp().getGetetag();&#10;        }&#10;    }&#10;&#10;    private String getContentLanguage(Response response) {&#10;        List&lt;Propstat&gt; list = response.getPropstat();&#10;        if (list.isEmpty()) {&#10;            return null;&#10;        } else {&#10;            Iterator var3 = list.iterator();&#10;&#10;            Propstat propstat;&#10;            do {&#10;                if (!var3.hasNext()) {&#10;                    return null;&#10;                }&#10;&#10;                propstat = (Propstat)var3.next();&#10;            } while(propstat.getProp() == null);&#10;&#10;            Resourcetype resourcetype = propstat.getProp().getResourcetype();&#10;            if (resourcetype != null &amp;&amp; resourcetype.getCollection() != null) {&#10;                return &quot;httpd/unix-directory&quot;;&#10;            } else {&#10;                return propstat.getProp().getGetcontentlanguage();&#10;            }&#10;        }&#10;    }&#10;&#10;    private String getDisplayName(Response response) {&#10;        List&lt;Propstat&gt; list = response.getPropstat();&#10;        if (list.isEmpty()) {&#10;            return null;&#10;        } else {&#10;            Iterator var3 = list.iterator();&#10;&#10;            Propstat propstat;&#10;            do {&#10;                if (!var3.hasNext()) {&#10;                    return null;&#10;                }&#10;&#10;                propstat = (Propstat)var3.next();&#10;            } while(propstat.getProp() == null);&#10;&#10;            return propstat.getProp().getDisplayname();&#10;        }&#10;    }&#10;&#10;    private List&lt;QName&gt; getResourceTypes(Response response) {&#10;        List&lt;Propstat&gt; list = response.getPropstat();&#10;        if (list.isEmpty()) {&#10;            return Collections.emptyList();&#10;        } else {&#10;            List&lt;QName&gt; resourceTypes = new ArrayList();&#10;            Iterator var4 = list.iterator();&#10;&#10;            while(true) {&#10;                Resourcetype rt;&#10;                do {&#10;                    Propstat propstat;&#10;                    do {&#10;                        if (!var4.hasNext()) {&#10;                            return resourceTypes;&#10;                        }&#10;&#10;                        propstat = (Propstat)var4.next();&#10;                    } while(propstat.getProp() == null);&#10;&#10;                    rt = propstat.getProp().getResourcetype();&#10;                } while(rt == null);&#10;&#10;                if (rt.getCollection() != null) {&#10;                    resourceTypes.add(SardineUtil.createQNameWithDefaultNamespace(&quot;collection&quot;));&#10;                }&#10;&#10;                if (rt.getPrincipal() != null) {&#10;                    resourceTypes.add(SardineUtil.createQNameWithDefaultNamespace(&quot;principal&quot;));&#10;                }&#10;&#10;                Iterator var7 = rt.getAny().iterator();&#10;&#10;                while(var7.hasNext()) {&#10;                    Element element = (Element)var7.next();&#10;                    resourceTypes.add(SardineUtil.toQName(element));&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    private Map&lt;QName, String&gt; getCustomProps(Response response) {&#10;        List&lt;Propstat&gt; list = response.getPropstat();&#10;        if (list.isEmpty()) {&#10;            return null;&#10;        } else {&#10;            Map&lt;QName, String&gt; customPropsMap = new HashMap();&#10;            Iterator var4 = list.iterator();&#10;&#10;            while(true) {&#10;                Propstat propstat;&#10;                do {&#10;                    if (!var4.hasNext()) {&#10;                        return customPropsMap;&#10;                    }&#10;&#10;                    propstat = (Propstat)var4.next();&#10;                } while(propstat.getProp() == null);&#10;&#10;                List&lt;Element&gt; props = propstat.getProp().getAny();&#10;                Iterator var7 = props.iterator();&#10;&#10;                while(var7.hasNext()) {&#10;                    Element element = (Element)var7.next();&#10;                    customPropsMap.put(SardineUtil.toQName(element), element.getTextContent());&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    private Lockdiscovery getLockDiscovery(Response response) {&#10;        List&lt;Propstat&gt; list = response.getPropstat();&#10;        if (list.isEmpty()) {&#10;            return null;&#10;        } else {&#10;            Iterator var3 = list.iterator();&#10;&#10;            Propstat propstat;&#10;            do {&#10;                if (!var3.hasNext()) {&#10;                    return null;&#10;                }&#10;&#10;                propstat = (Propstat)var3.next();&#10;            } while(propstat.getProp() == null);&#10;&#10;            return propstat.getProp().getLockdiscovery();&#10;        }&#10;    }&#10;&#10;    private Supportedlock getSupportedLock(Response response) {&#10;        List&lt;Propstat&gt; list = response.getPropstat();&#10;        if (list.isEmpty()) {&#10;            return null;&#10;        } else {&#10;            Iterator var3 = list.iterator();&#10;&#10;            Propstat propstat;&#10;            do {&#10;                if (!var3.hasNext()) {&#10;                    return null;&#10;                }&#10;&#10;                propstat = (Propstat)var3.next();&#10;            } while(propstat.getProp() == null);&#10;&#10;            return propstat.getProp().getSupportedlock();&#10;        }&#10;    }&#10;&#10;    public int getStatusCode() {&#10;        return this.status;&#10;    }&#10;&#10;    public Date getCreation() {&#10;        return this.props.creation;&#10;    }&#10;&#10;    public Date getModified() {&#10;        return this.props.modified;&#10;    }&#10;&#10;    public String getContentType() {&#10;        return this.props.contentType;&#10;    }&#10;&#10;    public Long getContentLength() {&#10;        return this.props.contentLength;&#10;    }&#10;&#10;    public String getEtag() {&#10;        return this.props.etag;&#10;    }&#10;&#10;    public String getContentLanguage() {&#10;        return this.props.contentLanguage;&#10;    }&#10;&#10;    public String getDisplayName() {&#10;        return this.props.displayName;&#10;    }&#10;&#10;    public List&lt;QName&gt; getResourceTypes() {&#10;        return this.props.resourceTypes;&#10;    }&#10;&#10;    public boolean isDirectory() {&#10;        return &quot;httpd/unix-directory&quot;.equals(this.props.contentType);&#10;    }&#10;&#10;    public Map&lt;String, String&gt; getCustomProps() {&#10;        Map&lt;String, String&gt; local = new HashMap();&#10;        Map&lt;QName, String&gt; properties = this.getCustomPropsNS();&#10;        Iterator var3 = properties.keySet().iterator();&#10;&#10;        while(var3.hasNext()) {&#10;            QName key = (QName)var3.next();&#10;            local.put(key.getLocalPart(), properties.get(key));&#10;        }&#10;&#10;        return local;&#10;    }&#10;&#10;    public Map&lt;QName, String&gt; getCustomPropsNS() {&#10;        return this.props.customProps;&#10;    }&#10;&#10;    public Lockdiscovery getLockDiscovery() {&#10;        return this.props.lockDiscovery;&#10;    }&#10;&#10;    public Supportedlock getSupportedlock() {&#10;        return this.props.supportedLock;&#10;    }&#10;&#10;    public URI getHref() {&#10;        return this.href;&#10;    }&#10;&#10;    public String getName() {&#10;        String path = this.href.getPath();&#10;&#10;        try {&#10;            if (path.endsWith(&quot;/&quot;)) {&#10;                path = path.substring(0, path.length() - 1);&#10;            }&#10;&#10;            return path.substring(path.lastIndexOf(47) + 1);&#10;        } catch (StringIndexOutOfBoundsException var3) {&#10;            log.warning(String.format(&quot;Failed to parse name from path %s&quot;, path));&#10;            return null;&#10;        }&#10;    }&#10;&#10;    public String getPath() {&#10;        return this.href.getPath();&#10;    }&#10;&#10;    public String toString() {&#10;        return this.getPath();&#10;    }&#10;&#10;    private class DavProperties {&#10;        final Date creation;&#10;        final Date modified;&#10;        final String contentType;&#10;        final String etag;&#10;        final String displayName;&#10;        final List&lt;QName&gt; resourceTypes;&#10;        final String contentLanguage;&#10;        final Long contentLength;&#10;        final Map&lt;QName, String&gt; customProps;&#10;        final Lockdiscovery lockDiscovery;&#10;        final Supportedlock supportedLock;&#10;&#10;        DavProperties(Date creation, Date modified, String contentType, Long contentLength, String etag, String displayName, List&lt;QName&gt; resourceTypes, String contentLanguage, List&lt;QName&gt; supportedReports, Map&lt;QName, String&gt; customProps) {&#10;            this.creation = creation;&#10;            this.modified = modified;&#10;            this.contentType = contentType;&#10;            this.contentLength = contentLength;&#10;            this.etag = etag;&#10;            this.displayName = displayName;&#10;            this.resourceTypes = resourceTypes;&#10;            this.contentLanguage = contentLanguage;&#10;            this.customProps = customProps;&#10;            this.lockDiscovery = null;&#10;            this.supportedLock = null;&#10;        }&#10;&#10;        DavProperties(Response response) {&#10;            this.creation = SardineUtil.parseDate(DavResource.this.getCreationDate(response));&#10;            this.modified = SardineUtil.parseDate(DavResource.this.getModifiedDate(response));&#10;            this.contentType = DavResource.this.getContentType(response);&#10;            this.contentLength = DavResource.this.getContentLength(response);&#10;            this.etag = DavResource.this.getEtag(response);&#10;            this.displayName = DavResource.this.getDisplayName(response);&#10;            this.resourceTypes = DavResource.this.getResourceTypes(response);&#10;            this.contentLanguage = DavResource.this.getContentLanguage(response);&#10;            this.customProps = DavResource.this.getCustomProps(response);&#10;            this.lockDiscovery = DavResource.this.getLockDiscovery(response);&#10;            this.supportedLock = DavResource.this.getSupportedLock(response);&#10;        }&#10;    }&#10;}&#10;优化我选中的代码" />
              <option value="modified&#10;Type mismatch.&#10;Required:&#10;Long&#10;Found:&#10;Long?" />
              <option value="FATAL EXCEPTION: main&#10;                                                       Process: io.github.quillpad, PID: 3044&#10;                                                       kotlin.NotImplementedError: An operation is not implemented.&#10;                                                       &#9;at org.qosp.notes.ui.sync.webdav.WebdavAccountDialog$onViewCreated$2$1.invokeSuspend(WebdavAccountDialog.kt:107)&#10;                                                       &#9;at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)&#10;                                                       &#9;at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)&#10;                                                       &#9;at android.os.Handler.handleCallback(Handler.java:966)&#10;                                                       &#9;at android.os.Handler.dispatchMessage(Handler.java:110)&#10;                                                       &#9;at android.os.Looper.loopOnce(Looper.java:205)&#10;                                                       &#9;at android.os.Looper.loop(Looper.java:293)&#10;                                                       &#9;at android.app.ActivityThread.loopProcess(ActivityThread.java:9934)&#10;                                                       &#9;at android.app.ActivityThread.main(ActivityThread.java:9923)&#10;                                                       &#9;at java.lang.reflect.Method.invoke(Native Method)&#10;                                                       &#9;at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:586)&#10;                                                       &#9;at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:1240)&#10;                                                       &#9;Suppressed: kotlinx.coroutines.DiagnosticCoroutineContextException: [StandaloneCoroutine{Cancelling}@cb4be7d, Dispatchers.Main.immediate]&#10;2024-05-25 17:09:31.307 Process                     I  Sending signal. PID: 3044 SIG: 9&#10;2024-05-25 17:09:31.363 DollieAdapterService        E  notifyActivityState pkg:io.github.quillpad/org.qosp.notes.ui.MainActivity state:19 fg:false mUid:10256" />
            </list>
          </value>
        </entry>
      </map>
    </option>
    <option name="showInlineAcceptTips" value="false" />
    <option name="showInlineCancelTips" value="false" />
    <option name="showInlineTriggerTips" value="false" />
    <option name="upgradeStrategy" value="forbid" />
  </component>
</application>