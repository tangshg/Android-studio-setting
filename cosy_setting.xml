<application>
  <component name="CosySettings">
    <option name="manualOpenLocalModel" value="true" />
    <option name="parameter">
      <ChangeUserSettingParams>
        <option name="allowReportUsage" value="true" />
        <option name="cloud">
          <CloudModelParam>
            <option name="autoTrigger">
              <CloudModelAutoTrigger>
                <option name="enable" value="true" />
                <option name="generateLength" value="level_1" />
                <option name="modelLevel" value="large" />
              </CloudModelAutoTrigger>
            </option>
            <option name="enable" value="true" />
            <option name="manualTrigger">
              <CloudModelManualTrigger>
                <option name="generateLength" value="level_2" />
                <option name="modelLevel" value="large" />
              </CloudModelManualTrigger>
            </option>
          </CloudModelParam>
        </option>
        <option name="local">
          <LocalModelParam>
            <option name="enable" value="true" />
            <option name="inferenceMode" value="auto" />
            <option name="maxCandidateNum" value="3" />
          </LocalModelParam>
        </option>
      </ChangeUserSettingParams>
    </option>
    <option name="recentQueries">
      <map>
        <entry key="quillpad|">
          <value>
            <list>
              <option value="/explain code" />
            </list>
          </value>
        </entry>
        <entry key="quillpad|1032412478227560">
          <value>
            <list>
              <option value="/explain code" />
              <option value="/explain code" />
              <option value="enum class CloudService(override val nameResource: Int) : HasNameResource, EnumPreference by key(&quot;cloud_service&quot;) {&#10;    DISABLED(R.string.preferences_cloud_service_disabled) { override val isDefault = true },&#10;    NEXTCLOUD(R.string.preferences_cloud_service_nextcloud),&#10;    WEBDAV(R.string.preferences_cloud_service_webdavcloud),&#10;}" />
              <option value="生成文档注释" />
              <option value="/explain code" />
              <option value="/explain code" />
              <option value="/generate comment" />
              <option value="/explain code" />
              <option value="/explain code" />
              <option value="Note.asNextcloudNote" />
              <option value="/explain code" />
              <option value="/explain code" />
              <option value="/explain code" />
              <option value="我使用 sardine-android 的依赖，想要达成上述代码的作用，用来访问WEBDAV，帮我生成例子" />
              <option value="我需要是和 nextcloud.kt 完全一致的写法" />
              <option value="我只需要接口，不要实现" />
              <option value="/generate comment" />
              <option value="/explain code" />
              <option value="/explain code" />
              <option value="/explain code" />
            </list>
          </value>
        </entry>
        <entry key="quillpad|1738711289590196">
          <value>
            <list>
              <option value="D:\Android\AndroidProject\quillpad\app\build\generated\hilt\component_sources\defaultFlavorDebug\org\qosp\notes\App_HiltComponents.java:193: : [Dagger/MissingBinding] org.qosp.notes.preferences.CloudService cannot be provided without an @Provides-annotated method.&#10;  public abstract static class SingletonC implements FragmentGetContextFix.FragmentGetContextFixEntryPoint,&#10;                         ^" />
              <option value="package org.qosp.notes.preferences&#10;&#10;import androidx.datastore.core.DataStore&#10;import androidx.datastore.preferences.core.Preferences&#10;import androidx.datastore.preferences.core.emptyPreferences&#10;import com.tfcporciuncula.flow.FlowSharedPreferences&#10;import kotlinx.coroutines.ExperimentalCoroutinesApi&#10;import kotlinx.coroutines.flow.Flow&#10;import kotlinx.coroutines.flow.catch&#10;import kotlinx.coroutines.flow.map&#10;import me.msoul.datastore.EnumPreference&#10;import me.msoul.datastore.getEnum&#10;import me.msoul.datastore.setEnum&#10;import java.io.IOException&#10;&#10;/**&#10; * 偏好设置仓库类，用于管理应用的偏好设置数据。&#10; *&#10; * @param dataStore DataStore对象，用于持久化存储偏好设置。&#10; * @param sharedPreferences FlowSharedPreferences对象，用于管理Flow类型的SharedPreferences。&#10; */&#10;@OptIn(ExperimentalCoroutinesApi::class)&#10;class PreferenceRepository(&#10;    val dataStore: DataStore&lt;Preferences&gt;,&#10;    private val sharedPreferences: FlowSharedPreferences,&#10;) {&#10;    /**&#10;     * 获取指定键对应的加密字符串。&#10;     *&#10;     * @param key 配置项的键。&#10;     * @return Flow类型，代表配置项的值。&#10;     */&#10;    fun getEncryptedString(key: String): Flow&lt;String&gt; {&#10;        return sharedPreferences.getString(key, &quot;&quot;).asFlow()&#10;    }&#10;&#10;    /**&#10;     * 获取应用的所有偏好设置。&#10;     *&#10;     * @return Flow类型，包含应用的所有偏好设置 [AppPreferences]。&#10;     */&#10;&#10;    //这里定义了一个函数 getAll，返回值是 Flow&lt;AppPreferences&gt; 类型。&#10;&#10;    fun getAll(): Flow&lt;AppPreferences&gt; {&#10;        return dataStore.data&#10;            .catch {&#10;                if (it is IOException) {&#10;                    emit(emptyPreferences()) // 发出空偏好设置，处理数据存储异常。&#10;                } else {&#10;                    throw it // 重新抛出非IOException类型的异常。&#10;                }&#10;            }&#10;            .map { prefs -&gt;&#10;                AppPreferences(&#10;                    // 设置布局模式，根据用户偏好设置应用的布局展示方式&#10;                    layoutMode = prefs.getEnum(),&#10;&#10;                    // 设置主题模式，允许用户自定义应用的主题（如浅色、深色等）&#10;                    themeMode = prefs.getEnum(),&#10;&#10;                    // 设置暗色主题模式，提供额外的暗色主题选项以适配不同环境&#10;                    darkThemeMode = prefs.getEnum(),&#10;&#10;                    // 选择颜色方案，决定应用的色彩搭配和视觉风格&#10;                    colorScheme = prefs.getEnum(),&#10;&#10;                    // 设定排序方法，用于组织和排列笔记或其他数据的逻辑&#10;                    sortMethod = prefs.getEnum(),&#10;&#10;                    // 配置备份策略，定义数据备份的时机和条件&#10;                    backupStrategy = prefs.getEnum(),&#10;&#10;                    // 自定义笔记删除时间规则，管理数据清理行为&#10;                    noteDeletionTime = prefs.getEnum(),&#10;&#10;                    // 选定日期格式，个性化日期显示样式&#10;                    dateFormat = prefs.getEnum(),&#10;&#10;                    // 选定时间格式，调整时间显示的方式&#10;                    timeFormat = prefs.getEnum(),&#10;&#10;                    // 指定媒体打开方式，控制图片、视频等媒体文件的默认打开程序或应用内体验&#10;                    openMediaIn = prefs.getEnum(),&#10;&#10;                    // 开关显示日期功能，允许用户决定是否在界面中显示日期信息&#10;                    showDate = prefs.getEnum(),&#10;&#10;                    // 调整编辑器字体大小，提升文本编辑的可读性和舒适度&#10;                    editorFontSize = prefs.getEnum(),&#10;&#10;                    // 控制是否显示切换模式的Floating Action Button，优化用户界面操作&#10;                    showFabChangeMode = prefs.getEnum(),&#10;&#10;                    // 选项以决定是否将无笔记本归属的笔记进行分组处理&#10;                    groupNotesWithoutNotebook = prefs.getEnum(),&#10;&#10;                    // 定义检查项（如待办事项）的移动行为，提升任务管理效率&#10;                    moveCheckedItems = prefs.getEnum(),&#10;&#10;                    // 选择云服务提供商，配置云同步服务的基础&#10;                    cloudService = prefs.getEnum(),&#10;&#10;                    // 确定同步模式，自动化数据同步的策略和条件&#10;                    syncMode = prefs.getEnum(),&#10;&#10;                    // 启用或禁用背景同步，平衡数据更新的即时性和资源消耗&#10;                    backgroundSync = prefs.getEnum(),&#10;&#10;                    // 设置新创建笔记的默认同步状态，便于跨设备访问&#10;                    newNotesSyncable = prefs.getEnum(),&#10;&#10;                    )&#10;            }&#10;    }&#10;&#10;    /**&#10;     * 获取指定枚举类型的偏好设置。&#10;     *&#10;     * @param T 枚举类型，必须实现 [EnumPreference] 接口。&#10;     * @return Flow类型，代表指定枚举类型的偏好设置。&#10;     */&#10;    inline fun &lt;reified T&gt; get(): Flow&lt;T&gt; where T : Enum&lt;T&gt;, T : EnumPreference {&#10;        return dataStore.getEnum()&#10;    }&#10;&#10;    /**&#10;     * 同时设置多个加密字符串键值对。&#10;     *&#10;     * @param pairs 键值对数组，每个键值对包含一个键和对应的值。&#10;     */&#10;    suspend fun putEncryptedStrings(vararg pairs: Pair&lt;String, String&gt;) {&#10;        pairs.forEach { (key, value) -&gt;&#10;            sharedPreferences.getString(key).setAndCommit(value)&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 设置指定枚举类型的偏好设置。&#10;     *&#10;     * @param preference 需要设置的偏好设置枚举项，必须实现 [EnumPreference] 接口。&#10;     */&#10;    suspend fun &lt;T&gt; set(preference: T) where T : Enum&lt;T&gt;, T : EnumPreference {&#10;        dataStore.setEnum(preference)&#10;    }&#10;&#10;    /**&#10;     * 仓库类的伴生对象，定义了一些常量，用于云服务和WebDAV服务的配置。&#10;     */&#10;    companion object {&#10;        const val NEXTCLOUD_INSTANCE_URL = &quot;NEXTCLOUD_INSTANCE_URL&quot;&#10;        const val NEXTCLOUD_USERNAME = &quot;NEXTCLOUD_USERNAME&quot;&#10;        const val NEXTCLOUD_PASSWORD = &quot;NEXTCLOUD_PASSWORD&quot;&#10;&#10;        const val WEBDAV_INSTANCE_URL = &quot;WEBDAV_INSTANCE_URL&quot;&#10;        const val WEBDAV_USERNAME = &quot;WEBDAV_USERNAME&quot;&#10;        const val WEBDAV_PASSWORD = &quot;WEBDAV_PASSWORD&quot;&#10;    }&#10;}&#10;这是preferenceRepository，我如何在SyncManager中获取cloudService" />
              <option value="Type mismatch.&#10;Required:&#10;Flow&lt;CloudService&gt;&#10;Found:&#10;Flow&lt;KClass&lt;CloudService&gt;&gt;" />
              <option value="Type mismatch.&#10;Required:&#10;Flow&lt;CloudService&gt;&#10;Found:&#10;Flow&lt;Class&lt;CloudService&gt;&gt;" />
              <option value="Type mismatch.&#10;Required:&#10;Flow&lt;CloudService&gt;&#10;Found:&#10;Flow&lt;KClass&lt;CloudService&gt;&gt;" />
              <option value="Classifier 'CloudService' does not have a companion object, and thus must be initialized here" />
              <option value="Project\quillpad\app\build\generated\hilt\component_sources\defaultFlavorDebug\org\qosp\notes\App_HiltComponents.java:193: : [Dagger/MissingBinding] org.qosp.notes.preferences.AppPreferences cannot be provided without an @Inject constructor or an @Provides-annotated method.&#10;  public abstract static class SingletonC implements FragmentGetContextFix.FragmentGetContextFixEntryPoint," />
              <option value="帮我添加一个函数，用于获取cloudService" />
              <option value="@Provides&#10;    @Singleton&#10;    fun provideNextcloudManager(&#10;        nextcloudAPI: NextcloudAPI,&#10;        @Named(NO_SYNC) noteRepository: NoteRepository,&#10;        @Named(NO_SYNC) notebookRepository: NotebookRepository,&#10;        idMappingRepository: IdMappingRepository,&#10;    ) = NextcloudManager(nextcloudAPI, noteRepository, notebookRepository, idMappingRepository)&#10;我在其他moudel中写了 provideNextcloudManager，帮我优化provideSyncManager" />
              <option value="D:\Android\AndroidProject\quillpad\app\build\generated\hilt\component_sources\defaultFlavorDebug\org\qosp\notes\App_HiltComponents.java:193: : [Dagger/DuplicateBindings] org.qosp.notes.data.sync.core.SyncManager is bound multiple times:&#10;  public abstract static class SingletonC implements FragmentGetContextFix.FragmentGetContextFixEntryPoint," />
              <option value="@Provides&#10;    @Singleton&#10;    fun provideSyncManager(&#10;        @ApplicationContext context: Context,&#10;        preferenceRepository: PreferenceRepository,&#10;        idMappingRepository: IdMappingRepository,&#10;        nextcloudManager: NextcloudManager,&#10;        app: Application,&#10;    ) = SyncManager(&#10;        preferenceRepository,&#10;        idMappingRepository,&#10;        ConnectionManager(context),&#10;        nextcloudManager,&#10;        (app as App).syncingScope&#10;    )&#10;我这样写不报错，但是下面这种写法会报错&#10; @Provides&#10;    @Singleton&#10;    suspend fun provideSyncManager(&#10;        @ApplicationContext context: Context,&#10;        preferenceRepository: PreferenceRepository,&#10;        idMappingRepository: IdMappingRepository,&#10;        app: Application,&#10;    ): SyncManager {&#10;&#10;        val cloudService = preferenceRepository.getCloudService().first()&#10;&#10;         val cloudManager =   when (cloudService)&#10;            {&#10;&#10;            CloudService.NEXTCLOUD -&gt;TODO(&quot;Implement disabled sync manager logic&quot;)&#10;//                provideNextcloudManager(&#10;//                nextcloudAPI = NextcloudAPI(),&#10;//                noteRepository = noteRepository,&#10;//                notebookRepository = notebookRepository,&#10;//                idMappingRepository = idMappingRepository&#10;//            )&#10;            CloudService.WEBDAV -&gt;TODO(&quot;Implement disabled sync manager logic&quot;)&#10;//                provideWebdavManager(&#10;//                webdavAPI = WebdavAPIImpl(),&#10;//                noteRepository = noteRepository,&#10;//                notebookRepository = notebookRepository,&#10;//                idMappingRepository = idMappingRepository&#10;//            )&#10;            CloudService.DISABLED -&gt; TODO(&quot;Implement disabled sync manager logic&quot;)&#10;                else -&gt; TODO(&quot;Implement disabled sync manager logic&quot;)&#10;            }&#10;        return SyncManager(&#10;            preferenceRepository,&#10;            idMappingRepository,&#10;            ConnectionManager(context),&#10;            cloudManager,&#10;            (app as App).syncingScope&#10;        )&#10;    }" />
              <option value="@Provides&#10;    @Singleton&#10;    fun provideSyncManager(&#10;        @ApplicationContext context: Context,&#10;        preferenceRepository: PreferenceRepository,&#10;        idMappingRepository: IdMappingRepository,&#10;        nextcloudManager: NextcloudManager,&#10;        app: Application,&#10;    ) = SyncManager(&#10;        preferenceRepository,&#10;        idMappingRepository,&#10;        ConnectionManager(context),&#10;        nextcloudManager,&#10;        (app as App).syncingScope&#10;    )&#10;&#10;&#10;我这样写不报错，但是下面这种写法会报错&#10;&#10;&#10; @Provides&#10;    @Singleton&#10;    suspend fun provideSyncManager(&#10;        @ApplicationContext context: Context,&#10;        preferenceRepository: PreferenceRepository,&#10;        idMappingRepository: IdMappingRepository,&#10;        app: Application,&#10;    ): SyncManager {&#10;&#10;        val cloudService = preferenceRepository.getCloudService().first()&#10;&#10;         val cloudManager =   when (cloudService)&#10;            {&#10;&#10;            CloudService.NEXTCLOUD -&gt;TODO(&quot;Implement disabled sync manager logic&quot;)&#10;//                provideNextcloudManager(&#10;//                nextcloudAPI = NextcloudAPI(),&#10;//                noteRepository = noteRepository,&#10;//                notebookRepository = notebookRepository,&#10;//                idMappingRepository = idMappingRepository&#10;//            )&#10;            CloudService.WEBDAV -&gt;TODO(&quot;Implement disabled sync manager logic&quot;)&#10;//                provideWebdavManager(&#10;//                webdavAPI = WebdavAPIImpl(),&#10;//                noteRepository = noteRepository,&#10;//                notebookRepository = notebookRepository,&#10;//                idMappingRepository = idMappingRepository&#10;//            )&#10;            CloudService.DISABLED -&gt; TODO(&quot;Implement disabled sync manager logic&quot;)&#10;                else -&gt; TODO(&quot;Implement disabled sync manager logic&quot;)&#10;            }&#10;        return SyncManager(&#10;            preferenceRepository,&#10;            idMappingRepository,&#10;            ConnectionManager(context),&#10;            cloudManager,&#10;            (app as App).syncingScope&#10;        )&#10;    }&#10;&#10;下面是第二代码的报错信息&#10;D:\Android\AndroidProject\quillpad\app\build\generated\hilt\component_sources\defaultFlavorDebug\org\qosp\notes\App_HiltComponents.java:193: : [Dagger/MissingBinding] org.qosp.notes.data.sync.core.SyncManager cannot be provided without an @Inject constructor or an @Provides-annotated method.&#10;  public abstract static class SingletonC implements FragmentGetContextFix.FragmentGetContextFixEntryPoint," />
              <option value="@Provides&#10;    @Singleton&#10;    fun provideWebdavManager(&#10;        webdavAPI: WebdavAPI,&#10;        noteRepository: NoteRepository,&#10;        notebookRepository: NotebookRepository,&#10;        idMappingRepository: IdMappingRepository,&#10;    ): SyncProvider {&#10;        return WebdavManager(webdavAPI, noteRepository, notebookRepository, idMappingRepository)&#10;    }&#10;我选择以这种方式提供NextcloudManager，你帮我优化我刚刚给你的第二段代码" />
              <option value="Interface NextcloudAPI does not have constructor" />
              <option value="D:\Android\AndroidProject\quillpad\app\build\tmp\kapt3\stubs\defaultFlavorDebug\org\qosp\notes\di\UtilModule.java:51: : Cannot have more than one binding method with the same name in a single module&#10;    public final org.qosp.notes.data.sync.core.SyncManager provideSyncManager(@org.jetbrains.annotations.NotNull" />
              <option value="D:\Android\AndroidProject\quillpad\app\build\generated\hilt\component_sources\defaultFlavorDebug\org\qosp\notes\App_HiltComponents.java:193: : [Dagger/DependencyCycle] Found a dependency cycle:&#10;  public abstract static class SingletonC implements FragmentGetContextFix.FragmentGetContextFixEntryPoint,&#10;                         ^&#10;      org.qosp.notes.data.repo.NoteRepository is injected at&#10;          org.qosp.notes.di.WebdavModule.provideWebdavManager(, noteRepository, )&#10;      org.qosp.notes.data.sync.core.SyncProvider is injected at&#10;          org.qosp.notes.di.UtilModule.provideSyncManager(, syncProvider, )&#10;      org.qosp.notes.data.sync.core.SyncManager is injected at&#10;          org.qosp.notes.di.RepositoryModule.provideNoteRepository(, syncManager)&#10;      org.qosp.notes.data.repo.NoteRepository is injected at&#10;          org.qosp.notes.di.WebdavModule.provideWebdavManager(, noteRepository, )&#10;      ...&#10;  &#10;  The cycle is requested via:&#10;      org.qosp.notes.data.repo.NoteRepository is injected at&#10;          org.qosp.notes.di.UtilModule.provideBackupManager(noteRepository, )&#10;      org.qosp.notes.components.backup.BackupManager is injected at&#10;          org.qosp.notes.components.backup.BackupService.backupManager&#10;      org.qosp.notes.components.backup.BackupService is injected at&#10;          org.qosp.notes.components.backup.BackupService_GeneratedInjector.injectBackupService(org.qosp.notes.components.backup.BackupService) [org.qosp.notes.App_HiltComponents.SingletonC  org.qosp.notes.App_HiltComponents.ServiceC]" />
              <option value="D:\Android\AndroidProject\quillpad\app\build\generated\hilt\component_sources\defaultFlavorDebug\org\qosp\notes\App_HiltComponents.java:193: : [Dagger/MissingBinding] org.qosp.notes.data.sync.core.SyncProvider cannot be provided without an @Provides-annotated method.&#10;  public abstract static class SingletonC implements FragmentGetContextFix.FragmentGetContextFixEntryPoint,&#10;                         ^&#10;      org.qosp.notes.data.sync.core.SyncProvider is injected at&#10;          org.qosp.notes.di.UtilModule.provideSyncManager(, syncProvider, )&#10;      org.qosp.notes.data.sync.core.SyncManager is injected at&#10;          org.qosp.notes.components.workers.SyncWorker(, syncManager)&#10;      org.qosp.notes.components.workers.SyncWorker_AssistedFactory is injected at&#10;          org.qosp.notes.components.workers.SyncWorker_HiltModule.bind(factory)&#10;      java.util.Map&lt;java.lang.String,javax.inject.Provider&lt;androidx.hilt.work.WorkerAssistedFactory&lt;? extends androidx.work.ListenableWorker&gt;&gt;&gt; is injected at&#10;          androidx.hilt.work.WorkerFactoryModule.provideFactory(workerFactories)&#10;      androidx.hilt.work.HiltWorkerFactory is injected at&#10;          org.qosp.notes.App.workerFactory&#10;      org.qosp.notes.App is injected at&#10;          org.qosp.notes.App_GeneratedInjector.injectApp(org.qosp.notes.App)&#10;  The following other entry points also depend on it:&#10;      org.qosp.notes.components.backup.BackupService_GeneratedInjector.injectBackupService(org.qosp.notes.components.backup.BackupService) [org.qosp.notes.App_HiltComponents.SingletonC  org.qosp.notes.App_HiltComponents.ServiceC]&#10;      dagger.hilt.android.internal.lifecycle.HiltViewModelFactory.ViewModelFactoriesEntryPoint.getHiltViewModelMap() [org.qosp.notes.App_HiltComponents.SingletonC  org.qosp.notes.App_HiltComponents.ActivityRetainedC  org.qosp.notes.App_HiltComponents.ViewModelC]&#10;      org.qosp.notes.ui.MainActivity_GeneratedInjector.injectMainActivity(org.qosp.notes.ui.MainActivity) [org.qosp.notes.App_HiltComponents.SingletonC  org.qosp.notes.App_HiltComponents.ActivityRetainedC  org.qosp.notes.App_HiltComponents.ActivityC]&#10;      org.qosp.notes.ui.about.AboutFragment_GeneratedInjector.injectAboutFragment(org.qosp.notes.ui.about.AboutFragment) [org.qosp.notes.App_HiltComponents.SingletonC  org.qosp.notes.App_HiltComponents.ActivityRetainedC  org.qosp.notes.App_HiltComponents.ActivityC  org.qosp.notes.App_HiltComponents.FragmentC]&#10;      org.qosp.notes.ui.archive.ArchiveFragment_GeneratedInjector.injectArchiveFragment(org.qosp.notes.ui.archive.ArchiveFragment) [org.qosp.notes.App_HiltComponents.SingletonC  org.qosp.notes.App_HiltComponents.ActivityRetainedC  org.qosp.notes.App_HiltComponents.ActivityC  org.qosp.notes.App_HiltComponents.FragmentC]&#10;      org.qosp.notes.ui.common.AbstractNotesFragment_GeneratedInjector.injectAbstractNotesFragment(org.qosp.notes.ui.common.AbstractNotesFragment) [org.qosp.notes.App_HiltComponents.SingletonC  org.qosp.notes.App_HiltComponents.ActivityRetainedC  org.qosp.notes.App_HiltComponents.ActivityC  org.qosp.notes.App_HiltComponents.FragmentC]&#10;      org.qosp.notes.ui.editor.EditorFragment_GeneratedInjector.injectEditorFragment(org.qosp.notes.ui.editor.EditorFragment) [org.qosp.notes.App_HiltComponents.SingletonC  org.qosp.notes.App_HiltComponents.ActivityRetainedC  org.qosp.notes.App_HiltComponents.ActivityC  org.qosp.notes.App_HiltComponents.FragmentC]&#10;      org.qosp.notes.ui.main.MainFragment_GeneratedInjector.injectMainFragment(org.qosp.notes.ui.main.MainFragment) [org.qosp.notes.App_HiltComponents.SingletonC  org.qosp.notes.App_HiltComponents.ActivityRetainedC  org.qosp.notes.App_HiltComponents.ActivityC  org.qosp.notes.App_HiltComponents.FragmentC]&#10;      org.qosp.notes.ui.recorder.RecordAudioDialog_GeneratedInjector.injectRecordAudioDialog(org.qosp.notes.ui.recorder.RecordAudioDialog) [org.qosp.notes.App_HiltComponents.SingletonC  org.qosp.notes.App_HiltComponents.ActivityRetainedC  org.qosp.notes.App_HiltComponents.ActivityC  org.qosp.notes.App_HiltComponents.FragmentC]&#10;      org.qosp.notes.ui.sync.nextcloud.NextcloudAccountDialog_GeneratedInjector.injectNextcloudAccountDialog(org.qosp.notes.ui.sync.nextcloud.NextcloudAccountDialog) [org.qosp.notes.App_HiltComponents.SingletonC  org.qosp.notes.App_HiltComponents.ActivityRetainedC  org.qosp.notes.App_HiltComponents.ActivityC  org.qosp.notes.App_HiltComponents.FragmentC]&#10;      and 1 other" />
              <option value="The integer literal does not conform to the expected type Boolean" />
              <option value="中文" />
              <option value="/explain code" />
            </list>
          </value>
        </entry>
      </map>
    </option>
    <option name="showInlineAcceptTips" value="false" />
    <option name="showInlineCancelTips" value="false" />
    <option name="showInlineTriggerTips" value="false" />
  </component>
</application>